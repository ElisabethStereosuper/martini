{"version":3,"sources":["webpack://jmartini/./wp-content/themes/jmartini/src/js/components/loadContent copie.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAwB;AACkB;;AAE1C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,2CAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,wDAAO;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,iDAAiD;AAChF,oCAAoC,iDAAiD;AACrF,8CAA8C,oBAAoB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC","file":"loadContent-copie.js","sourcesContent":["import Macy from 'macy';\nimport { forEach } from '@stereorepo/sac';\n\n// Infinite load author: Cadu de Castro Alves\n// GitHub: https://github.com/castroalves\n\nconst loadContent = () => {\n    let portfolio = document.querySelector('#portfolio');\n    let btnLoadMore = document.querySelector('#load-more');\n\n    if(!portfolio || !btnLoadMore) return;\n\n    // Private Properties\n    let postsLoaded = true;\n    let startPage = 2;\n\n    // Macy layout\n    const macy = Macy({\n        container: '#portfolio',\n        trueOrder: false,\n        waitForImages: true,\n        margin: 0,\n        columns: 1,\n        mobileFirst: true,\n        breakAt: {\n            1100: 3,\n            800: 2\n        }\n    });\n\n    // Popin\n    const popin = document.getElementById('popin');\n    const popinContent = popin.querySelector('#popin-content');\n    const popinClose = popin.querySelector('#popin-close');\n    const popinNext = popin.querySelector('#popin-next');\n    const popinPrev = popin.querySelector('#popin-prev');\n    let currentPic;\n\n    // Builds the API URL with params _embed, per_page, and page\n    const getApiUrl = () => {\n        let apiUrl = new URL(window.location.origin + '/wp-json/wp/v2/photo');\n\n        apiUrl.search = new URLSearchParams({\n            _embed: true,\n            page: startPage,\n            per_page: 9\n        }).toString();\n\n        return apiUrl;\n    };\n\n    // Pop the popin\n    const loadPopin = link => {\n        const img = document.createElement('img');\n        img.src = link.href;\n\n        popinContent.innerHTML = '';\n        popinContent.appendChild(img);\n\n        popin.classList.add('on');\n\n        currentPic = Array.prototype.slice.call(portfolio.children).indexOf(link.parentNode);\n\n        currentPic === 0 ? popinPrev.setAttribute('disabled', true) : popinPrev.removeAttribute('disabled');\n    };\n\n    // Popin events\n    const addPopinEvents = () => {\n        forEach(document.getElementsByClassName('pic-link'), link => {\n            link.classList.remove('off');\n            link.addEventListener('click', e => {\n                e.preventDefault();\n                loadPopin(link);\n            }, false);\n        });\n    };\n\n    const nextPic = lastPic => {\n        const pics = document.getElementsByClassName('pic');\n        const nextPic = lastPic ? pics[0] : pics[currentPic + 1];\n\n        if (nextPic) {\n            loadPopin(nextPic.querySelector('.pic-link'));\n        } else {\n            loadPics(true);\n        }\n    };\n\n    const prevPic = () => {\n        const pics = document.getElementsByClassName('pic');\n        const prevPic = pics[currentPic - 1];\n\n        if (prevPic) {\n            loadPopin(prevPic.querySelector('.pic-link'));\n        }\n    };\n\n    // Builds the HTML to show all posts\n    const renderPostHtml = posts => {\n        let postHtml = '';\n\n        for (let post of posts) {\n            postHtml += postTemplate(post);\n        }\n\n        return postHtml;\n    };\n\n    // HTML template for a post\n    const postTemplate = post => {\n        return `\n                <div class=\"pic\">\n                    <a href=\"${post._embedded['wp:featuredmedia'][0].source_url}\" class=\"pic-link off\">\n                        <img src=\"${post._embedded['wp:featuredmedia'][0].source_url}\" class=\"pic-img\" />\n                        <p class=\"pic-text\">${post.title.rendered}</p>\n                    </a>\n                </div>`;\n    };\n\n    // Make a request to the REST API\n    const loadPics = async (loadFromPopin) => {\n        const url = getApiUrl();\n        const request = await fetch(url);\n\n        if (request.status === 200) {\n            const posts = await request.json();\n\n            if (!posts.length) return;\n\n            // Builds the HTML to show the posts\n            const postsHtml = renderPostHtml(posts);\n\n            // Adds the HTML into the posts div\n            portfolio.innerHTML += postsHtml;\n\n            // Required for the infinite scroll\n            postsLoaded = true;\n\n            // Recalculate Macy layout\n            macy.runOnImageLoad(() => {\n                //macy.recalculate(true, true);\n\n                // Add popin events\n                addPopinEvents();\n\n                // Call again next pic in popin if loading pics was made from popin\n                if (loadFromPopin) nextPic();\n            }, true);\n\n            // Increase every time content is loaded\n            ++startPage;\n        } else if (request.status === 400) {\n            // Start over at begining of pics in popin if loading pics was made from popin\n            if (loadFromPopin) nextPic(true);\n        }\n    };\n\n    // Add popin events\n    addPopinEvents();\n\n    // Popin events\n    popinClose.addEventListener('click', () => {\n        popin.classList.remove('on');\n    }, false);\n\n    popinNext.addEventListener('click', () => {\n        nextPic();\n    }, false);\n    popinPrev.addEventListener('click', () => {\n        prevPic();\n    }, false);\n\n    // Where the magic happens\n    // Checks if IntersectionObserver is supported\n    if ('IntersectionObserver' in window) {\n        const loadMoreCallback = (entries, observer) => {\n            entries.forEach(btn => {\n                if (btn.isIntersecting && postsLoaded === true) {\n                    postsLoaded = false;\n                    loadPics();\n                }\n            });\n        };\n\n        let loadMoreObserver = new IntersectionObserver(loadMoreCallback, {\n            threshold: 0.1\n        });\n        \n        loadMoreObserver.observe(btnLoadMore);\n    }\n};\n\nexport default loadContent;\n"],"sourceRoot":""}