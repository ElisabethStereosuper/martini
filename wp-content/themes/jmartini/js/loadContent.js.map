{"version":3,"sources":["webpack://jmartini/./wp-content/themes/jmartini/src/js/components/loadContent.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,0BAA0B,iDAAiD;AAC3E,gDAAgD,UAAU,uDAAuD,oBAAoB;AACrI;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA,wB","file":"loadContent.js","sourcesContent":["// This pen is a real example of how to build an Infinite Scroll\n// in Vanilla JavaScript. I've used Fetch API, Intersection Observer API,\n// and WordPress REST API to fetch posts.\n// Feel free to fork, use and modify this code.\n//\n// Author: Cadu de Castro Alves\n// Twitter: https://twitter.com/castroalves\n// GitHub: https://github.com/castroalves\nconst WPInfiniteScroll = (() => {\n  \n  // Basic Configuration\n  const config = {\n    api: 'http://jmartini.local/wp-json/wp/v2/photo',\n    startPage: 0, // 0 for the first page, 1 for the second and so on...\n    postsPerPage: 5 // Number of posts to load per page\n  };\n  \n  // Private Properties\n  let postsLoaded = false;\n  let postsContent = document.querySelector('#portfolio');\n  let btnLoadMore = document.querySelector('.btn-load-more');\n  \n  // Private Methods\n  const loadContent = function() {\n    \n      // Starts with page = 1\n      // Increase every time content is loaded\n      ++config.startPage;\n    \n      // Basic query parameters to filter the API\n      // Visit https://developer.wordpress.org/rest-api/reference/posts/#arguments\n      // For information about other parameters\n      const params = {\n        _embed: true, // Required to fetch images, author, etc\n        page: config.startPage, // Current page of the collection\n        per_page: config.postsPerPage, // Maximum number of posts to be returned by the API\n      }\n    \n      // console.log('_embed', params._embed);\n      // console.log('per_page', params.per_page);\n      // console.log('page', params.page);\n    \n      // Builds the API URL with params _embed, per_page, and page\n      const getApiUrl = (url) => {\n        let apiUrl = new URL(url);\n        apiUrl.search = new URLSearchParams(params).toString();\n        return apiUrl;\n      };\n    \n      // Make a request to the REST API\n      const loadPosts = async () => {\n        const url = getApiUrl(config.api);\n        const request = await fetch(url);\n        const posts = await request.json();\n        \n        // Builds the HTML to show the posts\n        const postsHtml = renderPostHtml(posts);\n        \n        // Adds the HTML into the posts div\n        postsContent.innerHTML += postsHtml;\n        \n        // Required for the infinite scroll\n        postsLoaded = true;\n      };\n    \n      // Builds the HTML to show all posts\n      const renderPostHtml = (posts) => {\n        let postHtml = '';\n        for(let post of posts) {\n          postHtml += postTemplate(post);\n        };\n        return postHtml;\n      };\n    \n      // HTML template for a post\n      const postTemplate = (post) => {\n        return `\n            <div id=\"pic-${post.id}\" class=\"pic\">\n              <img src=\"${post._embedded['wp:featuredmedia'][0].source_url}\" class=\"post-thumbnail\" />\n              <h3 class=\"post-title\"><a href=\"${post.link}?utm_source=codepen&utm_medium=link\" target=\"_blank\">${post.title.rendered}</a></h3>\n            </div>`;\n      };\n    \n      loadPosts();\n  };\n  \n  // Where the magic happens\n  // Checks if IntersectionObserver is supported\n  if ('IntersectionObserver' in window) {\n    \n    const loadMoreCallback = (entries, observer) => {\n      entries.forEach((btn) => {\n        if (btn.isIntersecting && postsLoaded === true) {\n          postsLoaded = false;\n          loadContent();\n        }\n      });\n    };\n    \n    // Intersection Observer options\n    const options = {\n      threshold: 1.0 // Execute when button is 100% visible\n    };\n    \n    let loadMoreObserver = new IntersectionObserver(loadMoreCallback, options);\n    loadMoreObserver.observe(btnLoadMore);\n  }\n  \n  // Public Properties and Methods\n  return {\n    init: loadContent\n  };\n  \n})();\n\n// Initialize Infinite Scroll\nWPInfiniteScroll.init();"],"sourceRoot":""}